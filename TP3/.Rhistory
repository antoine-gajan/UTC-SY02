runifa <- function(n)
{
if(!exists("param")) param <<- sample(10:20, 1)
runif(n, min = 0, max = param)
}
estim <- function(echantillon)
{
return(2*mean(echantillon))
}
estim(runifa(100))
estim <- function(echantillon)
{
return(2*mean(echantillon))
}
estim(runifa(100))
a <- replicate(1000, estim(runifa(n)))
n <- 100
a <- replicate(1000, estim(runifa(n)))
a
mean(a)
h <- hist(a)
param
b <- boxplot(a)
estim <- function(echantillon, k)
{
return(((k+1)*mean(echantillon))^(1/k))
}
a <- replicate(1000, estim(runifa(n)))
a <- replicate(1000, estim(runifa(n), 1))
a
mean(a)
param
a <- replicate(1000, estim(runifa(n), 2))
a
estim <- function(echantillon, k)
{
return(((k+1)*mean(echantillon^k))^(1/k))
}
estim(runifa(n), 2)
> a <- replicate(1000, estim(runifa(n), 2))
a <- replicate(1000, estim(runifa(n)), 2)
a <- replicate(1000, estim(runifa(n), 2))
a
mean(a)
param
boxplot(a)
a <- replicate(1000, estim(runifa(n), 3))
a
mean(a)
a <- replicate(1000, estim(runifa(n), 4))
a
mean(a)
runknown <- function(n) {
bn <- rbinom(n, 1, 0.2)
bn * rnorm(n, mean=-4, sd=1) + (1 - bn) * rnorm(n, mean=10, sd=1)
}
mean(runknown(n))
mean(runknown(n))
mean(runknown(n))
mean(runknown(n))
mean(runknown(1000))
mean(runknown(10000))
sd(runknown(10000))
sqrt(32.36)
h <- hist(runknown(1000))
plot(ecdf(runknown(1000)))
n <- 1000
X <- runknown(n)
X
T <- (mean(X) - u)/(o/sqrt(n))
param
mean(a)
u <- 7.2
o <- sqrt(32.36)
T <- (mean(X) - u)/(o/sqrt(n))
T
mean(X)
sd(X)
bn
Tvalue <- function(echantillon)
{
return (mean(echantillon) - u)/(o/sqrt(length(echantillon)))
}
T <- replicate(1000, Tvalue(runknown(n)))
T
mean(T)
random.T <- function(n)
{
return (mean(runknown(n)) - u)/(o/sqrt(n))
}
t.10 <- replicate(10, random.T(n))
t.10
mean(t.10)
sd(t.10)
var(t.10)
t.1000 <- replicate(1000, random.T(n))
t.1000
mean(t.1000)
var(t.1000)
ecdf(t.1000)
plot(ecdf(t.1000))
plot(ecdf(runknown(n)))
plot(ecdf(t.1000))
plot(ecdf(runknown(n)))
par(mfrow = c(1, 2))
plot(ecdf(runknown(n)))
plot(ecdf(runknown(n)))
plot(ecdf(t.1000))
curve(pnorm, add=TRUE)
curve(pnorm, add=TRUE)
curve(pnorm, from = -5, to = 5,add=TRUE)
curve(ecdf(dnorm), add=TRUE)
curve(ecdf(dnorm), add=TRUE)
curve(pnorm, add=TRUE)
plot(ecdf(t.1000))
curve(pnorm, add=TRUE)
mean(lambdas_real) - 3
#Question 1
n <- 100
runifa <- function(n)
{
if(!exists("param")) param <<- sample(10:20, 1)
runif(n, min = 0, max = param)
}
estim <- function(echantillon)
{
return(2*mean(echantillon))
}
#Question 2
a <- replicate(1000, estim(runifa(n)))
#Question 3
b <- boxplot(a)
#Question 4
estim <- function(echantillon, k)
{
return(((k+1)*mean(echantillon^k))^(1/k))
}
a <- replicate(1000, estim(runifa(n), 2))
a <- replicate(1000, estim(runifa(n), 3))
a <- replicate(1000, estim(runifa(n), 4))
#Question 5
runknown <- function(n) {
bn <- rbinom(n, 1, 0.2)
bn * rnorm(n, mean=-4, sd=1) + (1 - bn) * rnorm(n, mean=10, sd=1)
}
n <- 1000
X <- runknown(n)
mean(X)
sd(X)
sqrt(32.36)
u <- 7.2
o <- sqrt(32.36)
#Question 6
h <- hist(runknown(n))
#Question 7
plot(ecdf(runknown(n)))
#Question 8
T <- (mean(X) - u)/(o/sqrt(n))
#Question 10
random.T <- function(n)
{
u <- 7.2
o <- sqrt(32.36)
return ((mean(runknown(n)) - u)/(o/sqrt(n)))
}
t.10 <- replicate(10, random.T(n))
t.1000 <- replicate(1000, random.T(n))
#Question 11
plot(ecdf(runknown(n)))
plot(ecdf(t.1000))
#Question 12
curve(pnorm, add=TRUE)
#Question 14
f <- function(lambda, x)
{
return (dexp(x, rate=lambda))
}
#Question 15
L <- function(lambda, x)
{
return (prod(f(lambda, x)))
}
#Question 16
logL <- function(lambda, x)
{
return (sum(log(f(lambda, x))))
}
#Question 17
x <- rexp(100, rate = 3)
L(2.8, x)
L(3.1, x)
logL(2.8, x)
logL(3.1, x)
#Question 18
lambdas <- seq(0, 6, 0.01)
logL.lambdas <- sapply(lambdas, function(lambda) logL(lambda, x))
plot(lambdas, logL.lambdas, type = "l")
#La fonction affiche les valeurs de log vraissemblances pour des valeurs
#de lambdas diffÃ©rentes entre 0 et 6
#Question 19
g <- function(lambda)
{
x <- rexp(100, rate = 3)
return(logL(lambda, x))
}
opt <- optimize(g, lower = 0, upper = 6, maximum =  TRUE)
#Question 20
sim.EMV <- function()
{
x <- rexp(100, rate = 3)
opt <- optimize(function(lambda) logL(lambda, x), lower = 0, upper = 6, maximum =  TRUE)
return(opt$maximum)
}
#Question 21
lambdas_real <- replicate(10000, sim.EMV())
mean(lambdas_real)
var(lambdas_real)
#Question 22
mean(lambdas_real) - 3
(n/(n-1)) * 3 - 3
(n/(n-1)) * 3 - 3
install.packages("pracma")
library(pracma)
grad(g, 0)
g <- function(x) {
-(x - pi)^2
}
grad(g, 0)
sim.Fisher <- function()
{
x <- rexp(100, rate = 3)
return (grad(function(lambda) logL(lambda, x), 3))
}
sim.Fisher()
sim.Fisher <- function()
{
x <- rexp(100, rate = 3)
deriv <- grad(function(lambda) (logL(lambda, x))^2, 3)
fisher <- mean(deriv)
return (fisher)
}
sim.Fisher()
sim.Fisher <- function()
{
x <- rexp(100, rate = 3)
#deriv <- grad(function(lambda) (logL(lambda, x)), 3)
deriv <- grad(logL(3, x), 3)
fisher <- mean(deriv)
return (fisher)
}
sim.Fisher()
sim.Fisher <- function()
{
x <- rexp(100, rate = 3)
deriv <- grad(function(lambda) (logL(lambda, x)), 3)
fisher <- mean(deriv^2)
return (fisher)
}
sim.Fisher()
sim.Fisher <- function()
{
x <- rexp(100, rate = 3)
deriv <- grad(function(lambda) (logL(lambda, x)), 3)
fisher <- mean(deriv^2)
return (deriv)
}
sim.Fisher()
sim.Fisher <- function()
{
x <- rexp(100, rate = 3)
fisher <- grad(function(lambda) (logL(lambda, x)), 3)
return (fisher^2)
}
sim.Fisher()
sim.Fisher <- function()
{
x <- rexp(1000, rate = 3)
fisher <- grad(function(lambda) (logL(lambda, x)), 3)
return (fisher^2)
}
sim.Fisher()
fisher <- replicate(1000, sim.Fisher())
fisher
fisher_moy <- mean(fisher)
fisher_moy
fisher_theorique <- 1000 / (3^2)
fisher_theorique
variance <- 1 / fisher_moy
variance_empirique <- 1 / fisher_theorique
variance
variance_empirique
grad2 <- function(f, x)
{
f_premiere <- function(x) grad(f, x)
f_seconde <- function(x) grad(f_premiere, x)
return(f_seconde(x))
}
sim.Fisher2 <- function()
{
x <- rexp(1000, rate = 3)
fisher <- grad2(function(lambda) (logL(lambda, x)), 3)
}
sim.Fisher2()
fisher
sim.Fisher2 <- function()
{
x <- rexp(1000, rate = 3)
fisher <- grad2(function(lambda) (logL(lambda, x)), 3)
return (fisher)
}
sim.Fisher2()
fisher_2 <- -sim.Fisher2()
fisher_2
