bottles <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP6/bottles.data", sep="")
View(bottles)
t.test(bottles, mu = 500, alternative = "less", conf.level = 0.1)
t.test(bottles, mu = 500, alternative = "less", conf.level = 0.05)
MM <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP6/MM.data")
View(MM)
prop.test(222, 1713, 1/5)
prop.test(222, 1713, 1/5, alternative = "two-sided")
prop.test(222, 1713, 1/5, alternative = "two.sided")
prop.test(217, 1713, 1/5)
prop.test(199, 1713, 1/5)
prop.test(413, 1713, 1/5)
prop.test(374, 1713, 1/5)
install.packages("isdals")
library(isdals)
data(bodyfat)
reglin1 <- lm(Fat~Triceps)
reglin1 <- lm(bodyfat$Fat~bodyfat$Triceps)
reglin1 <- lm(bodyfat$Fat~bodyfat$Triceps)
reglin2 <- lm(bodyfat$Fat~bodyfat$Thigh)
reglin3 <- lm(bodyfat$Fat~bodyfat$Midarm)
par(mfrow = c(2, 2))
reglin1 <- lm(bodyfat$Fat~bodyfat$Triceps)
reglin2 <- lm(bodyfat$Fat~bodyfat$Thigh)
reglin3 <- lm(bodyfat$Fat~bodyfat$Midarm)
plot(bodyfat$Fat~bodyfat$Triceps)
plot(bodyfat$Fat~bodyfat$Thigh)
bodyfat$Fat~bodyfat$Midarm)
plot(bodyfat$Fat~bodyfat$Midarm)
summary(reglin1)$r.squared
summary(reglin1)$r.squared
summary(reglin2)$r.squared
summary(reglin3)$r.squared
# Test homogénéité
plot(reglin1$fitted.values, rstandard(reglin1))
plot(bodyfat$Fat~bodyfat$Triceps)
plot(bodyfat$Fat~bodyfat$Thigh)
plot(bodyfat$Fat~bodyfat$Midarm)
summary(reglin1)$r.squared
summary(reglin2)$r.squared
summary(reglin3)$r.squared
qqnorm(reglin1$residuals)
qqline()
plot(reglin1$fitted.values, rstandard(reglin1))
plot(reglin1$fitted.values, rstandard(reglin2))
plot(reglin1$fitted.values, rstandard(reglin3))
t.test(bottles, mu = 500, alternative = "less", conf.level = 0.95)
t.test(bottles, mu = 500, alternative = "less", conf.level = 0.9)
prop.test(222, 1713, 1/6)
prop.test(217, 1713, 1/6)
prop.test(199, 1713, 1/6)
prop.test(413, 1713, 1/6)
prop.test(374, 1713, 1/6)
prop.test(217, 1713, 1/6)
prop.test(199, 1713, 1/6)
summary(reglin3)
delai.data <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP6/delai-data.data", sep="")
View(delai.data)
x_bar <- mean(delai.data$delai)
n <- length(delai.data$delai)
theta0 <- 1 / 151
x_bar < abs(qnorm(alpha / sqrt(n) + 1) / theta0)
alpha <- 0.05
x_bar <- mean(delai.data$delai)
n <- length(delai.data$delai)
theta0 <- 1 / 151
x_bar < abs(qnorm(alpha / sqrt(n) + 1) / theta0)
x_bar <- mean(delai.data$delai)
x_bar
n <- length(delai.data$delai)
n
theta0
abs(qnorm(alpha / sqrt(n) + 1) / theta0)
x_bar < abs((qnorm(alpha) / sqrt(n) + 1) / theta0)
seuil <- abs((qnorm(alpha) / sqrt(n) + 1) / theta0)
x_bar
seuil
x_bar <- mean(delai.data$delai)
seuil <- abs((qnorm(alpha) / sqrt(n) + 1) / theta0)
x_bar
seuil
p_value <- pexp(x_bar, theta0)
p_value
puiss_emp <- function(theta0, theta, n)
{
echantillon <- rexp(n, theta)
return ((mean(echantillon) < abs((qnorm(alpha) / sqrt(n) + 1) / theta0)))
}
puiss_emp(1/151, 1/140, 100)
puiss_emp(1/151, 1/10, 100)
puiss_emp(1/151, 1/10, 10)
puiss_emp(1/151, 1/10, 10)
puiss_emp(1/151, 1/10, 10)
puiss_emp(1/151, 1/10, 10)
puiss_emp(1/151, 1/10, 10)
puiss_emp(1/11, 1/100, 10)
mean(replicate(puiss_emp(1/151, 1/100, 10)))
mean(replicate(1000, puiss_emp(1/151, 1/100, 10)))
pexp((mean(delai.data) - (1/theta0) / (1 / (theta0 * sqrt(n)))))
pexp((mean(delai.data$delai) - (1/theta0) / (1 / (theta0 * sqrt(n)))))
pnorm((mean(delai.data$delai) - (1/theta0) / (1 / (theta0 * sqrt(n)))))
mean(replicate(1000, puiss_emp(1/151, 1/100, 10)))
mean(replicate(1000, puiss_emp(1/151, 1/100, 10)))
mean(replicate(10000, puiss_emp(1/151, 1/151, 100)))
sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
puiss_emp_vec <- sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
theta <- seq(theta0, theta0 * (1 + 0.70))
puiss_emp_rep <- function(theta0, theta, n, k)
{
mean(replicate(k, puiss_emp(theta, theta0, n)))
}
n <- length(delai.data$delai)
puiss_emp_vec <- sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
puiss_emp_vec
theta <- seq(theta0, theta0 * (1 + 0.70))
puiss_emp_rep <- function(theta0, theta, n, k)
{
replicate(k, puiss_emp(theta, theta0, n))
}
n <- length(delai.data$delai)
puiss_emp_vec <- sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
puiss_emp_vec
n
puiss_emp_vec <- sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
puiss_emp_vec
puiss_emp <- function(theta0, theta, n)
{
echantillon <- rexp(n, theta)
return ((mean(echantillon) < abs((qnorm(alpha) / sqrt(n) + 1) / theta0)))
}
mean(replicate(10000, puiss_emp(1/151, 1/151, 100))) # Proche de alpha
replicate(10000, puiss_emp(1/151, 1/151, 100))) # Proche de alpha
replicate(10000, puiss_emp(1/151, 1/151, 100))
theta <- seq(theta0, theta0 * (1 + 0.70))
puiss_emp_rep <- function(theta0, theta, n, k)
{
replicate(k, mean(puiss_emp(theta, theta0, n)))
}
n <- length(delai.data$delai)
puiss_emp_vec <- sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
puiss_emp_vec
mean(replicate(10000, puiss_emp(1/151, 1/151, 100))) # Proche de alpha
t.test(x1, mu = 0, alternative = "greater")
x1 <- sleep$extra[sleep$group == 1]
x2 <- sleep$extra[sleep$group == 2]
t.test(x1, mu = 0, alternative = "greater")
t.test(x2, mu = 0, alternative = "greater")
t.test(x1, mu = 0, alternative = "greater")
t.test(x2, mu = 0, alternative = "greater")
puiss_emp <- function(theta0, theta, n)
{
echantillon <- rexp(n, theta)
return ((mean(echantillon) < abs((qnorm(alpha) / sqrt(n) + 1) / theta0)))
}
puiss_emp(theta0, theta0, 100)
mean(replicate(10000, puiss_emp(1/151, 1/151, 100)))
puiss_emp_rep <- function(theta0, theta, n, k)
{
mean(replicate(k, puiss_emp(theta0, theta, n)))
}
puiss_emp_rep(theta0, theta, n)
puiss_emp_rep(theta0, theta, n, 10000)
n <- length(delai.data$delai)
puiss_emp_vec <- sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
puiss_emp_vec
theta <- seq(theta0, theta0 * (1 + 0.70))
theta
theta <- seq(theta0, theta0 * (1 + 0.70), length.out = 100)
puiss_emp_vec <- sapply(theta, function(t) puiss_emp_rep(theta0, t, n, 10000))
puiss_emp_vec
plot(puiss_emp_vec, theta)
plot(theta, puiss_emp_vec)
plot(theta, puiss_emp_vec, main = "Puissance empirique en fonction de theta", xlab = "Theta", ylab = "Puissance empirique")
par(mfrow = c(3, 1))
# Représentation des données
plot(bodyfat$Fat~bodyfat$Triceps)
plot(bodyfat$Fat~bodyfat$Thigh)
plot(bodyfat$Fat~bodyfat$Midarm)
par(mfrow = c(1, 3))
plot(bodyfat$Fat~bodyfat$Triceps)
plot(bodyfat$Fat~bodyfat$Thigh)
plot(bodyfat$Fat~bodyfat$Midarm)
plot(bodyfat$Fat~bodyfat$Triceps, main = "Fat en fonction de Triceps", xlab = "Triceps", ylab = "Fat")
plot(bodyfat$Fat~bodyfat$Thigh, main = "Fat en fonction de Thigh", xlab = "Thigh", ylab = "Fat")
plot(bodyfat$Fat~bodyfat$Midarm, main = "Fat en fonction de Midarm", xlab = "Midarm", ylab = "Fat")
t.test(x1, mu = 0, alternative = "greater")
t.test(x2, mu = 0, alternative = "greater")
MM <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP6/MM.data")
for (n in c(1:6))
{
prop.test(MM[1, n], sums(MM), 1/6)
}
for (n in c(1:6))
{
prop.test(MM[1, n], sum(MM), 1/6)
}
for (n in c(1:6))
{
print(prop.test(MM[1, n], sum(MM), 1/6))
}
plot(bodyfat$Fat~bodyfat$Triceps, main = "Fat en fonction de Triceps", xlab = "Triceps", ylab = "Fat")
abline(reglin1$coefficients[1], reglin1$coefficients[2])
plot(bodyfat$Fat~bodyfat$Thigh, main = "Fat en fonction de Thigh", xlab = "Thigh", ylab = "Fat")
abline(reglin2$coefficients[1], reglin2$coefficients[2])
plot(bodyfat$Fat~bodyfat$Midarm, main = "Fat en fonction de Midarm", xlab = "Midarm", ylab = "Fat")
abline(reglin3$coefficients[1], reglin3$coefficients[2])
reglin3 <- lm(bodyfat$Fat~0 + bodyfat$Midarm)
plot(bodyfat$Fat~bodyfat$Midarm, main = "Fat en fonction de Midarm", xlab = "Midarm", ylab = "Fat")
abline(reglin3$coefficients[1], reglin3$coefficients[2])
reglin3 <- lm(bodyfat$Fat~0 + bodyfat$Midarm)
reglin3$coefficients
abline(0, reglin3$coefficients[2])
plot(bodyfat$Fat~bodyfat$Triceps, main = "Fat en fonction de Triceps", xlab = "Triceps", ylab = "Fat")
abline(reglin1$coefficients[1], reglin1$coefficients[2])
plot(bodyfat$Fat~bodyfat$Thigh, main = "Fat en fonction de Thigh", xlab = "Thigh", ylab = "Fat")
abline(reglin2$coefficients[1], reglin2$coefficients[2])
plot(bodyfat$Fat~bodyfat$Midarm, main = "Fat en fonction de Midarm", xlab = "Midarm", ylab = "Fat")
abline(reglin3$coefficients[1], reglin3$coefficients[2])
reglin1 <- lm(bodyfat$Fat~bodyfat$Triceps) # On peut refaire le test sans l'ordonnée à l'origine : 0 + Triceps pour tester le lien direct entre les 2 variables
reglin2 <- lm(bodyfat$Fat~bodyfat$Thigh) # Pr (> |t|) correspond à la pvalue du test
reglin3 <- lm(bodyfat$Fat~bodyfat$Midarm)
# Représentation des données
plot(bodyfat$Fat~bodyfat$Triceps, main = "Fat en fonction de Triceps", xlab = "Triceps", ylab = "Fat")
abline(reglin1$coefficients[1], reglin1$coefficients[2])
plot(bodyfat$Fat~bodyfat$Thigh, main = "Fat en fonction de Thigh", xlab = "Thigh", ylab = "Fat")
abline(reglin2$coefficients[1], reglin2$coefficients[2])
plot(bodyfat$Fat~bodyfat$Midarm, main = "Fat en fonction de Midarm", xlab = "Midarm", ylab = "Fat")
abline(reglin3$coefficients[1], reglin3$coefficients[2])
plot(bodyfat$Fat~bodyfat$Triceps, main = "Fat en fonction de Triceps", xlab = "Triceps", ylab = "Fat")
abline(reglin1$coefficients[1], reglin1$coefficients[2])
plot(bodyfat$Fat~bodyfat$Thigh, main = "Fat en fonction de Thigh", xlab = "Thigh", ylab = "Fat")
abline(reglin2$coefficients[1], reglin2$coefficients[2])
plot(bodyfat$Fat~bodyfat$Midarm, main = "Fat en fonction de Midarm", xlab = "Midarm", ylab = "Fat")
abline(reglin3$coefficients[1], reglin3$coefficients[2])
par(mfrow = c(1, 3))
# Création des régressions linéaires
reglin1 <- lm(bodyfat$Fat~bodyfat$Triceps) # On peut refaire le test sans l'ordonnée à l'origine : 0 + Triceps pour tester le lien direct entre les 2 variables
reglin2 <- lm(bodyfat$Fat~bodyfat$Thigh) # Pr (> |t|) correspond à la pvalue du test
reglin3 <- lm(bodyfat$Fat~bodyfat$Midarm)
# Représentation des données
plot(bodyfat$Fat~bodyfat$Triceps, main = "Fat en fonction de Triceps", xlab = "Triceps", ylab = "Fat")
abline(reglin1$coefficients[1], reglin1$coefficients[2])
plot(bodyfat$Fat~bodyfat$Thigh, main = "Fat en fonction de Thigh", xlab = "Thigh", ylab = "Fat")
abline(reglin2$coefficients[1], reglin2$coefficients[2])
plot(bodyfat$Fat~bodyfat$Midarm, main = "Fat en fonction de Midarm", xlab = "Midarm", ylab = "Fat")
abline(reglin3$coefficients[1], reglin3$coefficients[2])
qqnorm(reglin1$residuals, main = "Normal Q-Q Plot 1", xlab = "Theoretical Quantiles", ylab = "Dataset Quantiles")
qqline()
qqnorm(reglin2$residuals, main = "Normal Q-Q Plot 2", xlab = "Theoretical Quantiles", ylab = "Dataset Quantiles")
qqline()
qqnorm(reglin3$residuals, main = "Normal Q-Q Plot 3", xlab = "Theoretical Quantiles", ylab = "Dataset Quantiles")
qqline()
plot(reglin1$fitted.values, rstandard(reglin1), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité 1")
plot(reglin1$fitted.values, rstandard(reglin2), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité 2")
plot(reglin1$fitted.values, rstandard(reglin3), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité 3")
p-value <- pnorm((mean(delai) - 1 / theta0) / (1 / (theta0 * sqrt(n))))
p-value <- pnorm((mean(delai.data$delai) - 1 / theta0) / (1 / (theta0 * sqrt(n))))
p_value <- pnorm((mean(delai.data$delai) - 1 / theta0) / (1 / (theta0 * sqrt(n))))
p_value <- pnorm((mean(delai.data$delai) - 1 / theta0) / (1 / (theta0 * sqrt(n))))
p_value
theta0
alpha <- 0.05
x_bar <- mean(delai.data$delai)
n <- length(delai.data$delai)
theta0 <- 1 / 151
p_value <- pnorm((mean(delai.data$delai) - 1 / theta0) / (1 / (theta0 * sqrt(n))))
p_value <- pnorm(x_bar - 1 / theta0) / (1 / (theta0 * sqrt(n))))
p_value <- pnorm(x_bar - 1 / theta0) / (1 / (theta0 * sqrt(n)))
p_value <- pnorm((mean(delai.data$delai) - 1 / theta0) / (1 / (theta0 * sqrt(n))))
p_value <- pnorm((x_bar - 1 / theta0) / (1 / (theta0 * sqrt(n))))
